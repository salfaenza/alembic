import os
from sqlalchemy import inspect
from sqlalchemy.orm import Session
from alembic.config import Config
from alembic import command
from alembic.script import ScriptDirectory
from alembic.migration import MigrationContext
from alembic.autogenerate import compare_metadata

# Import your SQLAlchemy Base and engine
from your_dynamic_model import base, get_engine

ALEMBIC_INI_PATH = os.path.join(os.path.dirname(__file__), "alembic.ini")

def stamp_db_if_not_stamped(alembic_cfg, engine):
    """
    If 'alembic_version' doesn't exist, stamp current DB schema as baseline 
    so Alembic won't try to recreate existing tables.
    """
    inspector = inspect(engine)
    if "alembic_version" not in inspector.get_table_names():
        print("ðŸ“Œ No 'alembic_version' table found. Stamping existing DB at 'head' as baseline.")
        command.stamp(alembic_cfg, "head")
    else:
        print("âœ… Alembic is already tracking this DB.")

def get_current_heads(alembic_cfg):
    """
    Returns a set of currently applied DB revisions from Alembic, or empty if none.
    """
    current = command.current(alembic_cfg, verbose=False)
    if current is None:
        return set()
    if isinstance(current, list):
        # Alembic >= 1.7 may return a list
        return set([rev for rev in current if rev])
    # else it's a string, possibly multiple revs
    return set(r.strip() for r in current.split(",") if r.strip())

def get_latest_heads(alembic_cfg):
    """
    Returns the set of head revisions from the script directory 
    (usually only one unless there's a merge).
    """
    script_dir = ScriptDirectory.from_config(alembic_cfg)
    return set(script_dir.get_heads())

def is_db_uptodate(alembic_cfg):
    """
    Check if the DB is at the most recent head(s).
    """
    current_heads = get_current_heads(alembic_cfg)
    latest_heads = get_latest_heads(alembic_cfg)
    return current_heads == latest_heads

def detect_model_changes(engine):
    """
    Use an in-memory Alembic 'MigrationContext' + 'compare_metadata'
    to detect if the DB schema differs from the SQLAlchemy models (base.metadata).
    Returns True if differences exist, otherwise False.
    """
    conn = engine.connect()
    try:
        # Configure a MigrationContext for the current DB
        migration_ctx = MigrationContext.configure(conn)
        db_diffs = compare_metadata(migration_ctx, base.metadata)
        return bool(db_diffs)  # True if there's at least one difference
    finally:
        conn.close()

def run_auto_migration():
    engine = get_engine()
    base.metadata.bind = engine

    alembic_cfg = Config(ALEMBIC_INI_PATH)
    alembic_cfg.set_main_option("sqlalchemy.url", str(engine.url))

    # Step 1: Stamp if needed (bring existing DB under Alembic)
    stamp_db_if_not_stamped(alembic_cfg, engine)

    # Step 2: Ensure DB is at current head if there are existing migrations
    if get_latest_heads(alembic_cfg):
        # If any migrations exist in versions folder, ensure DB is up to date
        if not is_db_uptodate(alembic_cfg):
            print("ðŸ”„ Database not at latest revision; upgrading to head...")
            command.upgrade(alembic_cfg, "head")

    # Step 3: Check if the models differ from the DB
    if detect_model_changes(engine):
        print("ðŸ”§ Model changes detected; creating new migration...")
        # Autogenerate and create a new revision script
        command.revision(alembic_cfg, autogenerate=True, message="Auto migration")
        print("ðŸš€ Applying the new migration...")
        command.upgrade(alembic_cfg, "head")
        print("âœ… Database schema is now up-to-date with model changes.")
    else:
        print("âœ… No schema changes detected. DB is already up-to-date.")

if __name__ == "__main__":
    run_auto_migration()
